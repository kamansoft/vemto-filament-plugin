<?php
<####>
/**
*  Generated on: 
*  with: https://github.com/kamansoft/vemto-filament-plugin
*  for: <$  this.projectName $>
*  by: kamansoft.com
*/
<# TEMPLATE VARIABLES #>
<% let crudModelName = this.crud.model.name %>
<% let crudPluginData = this.crud.pluginConfig %>
<% let modelsNamespace = this.projectHelper.getModelsNamespace() %>

namespace App\Filament\Resources;

use Illuminate\Support\Str;
use <$ modelsNamespace $>\<$ crudModelName $>;
use Filament\{
    Tables, Forms
};
use Filament\Resources\{
    Form, Table, Resource
};
use App\Filament\Resources\<$ crudModelName $>Resource\Pages;
<% if(this.crudHasTextInputs) { %>
use Filament\Forms\Components\TextInput;
<% } %>
<% if(this.crud.hasJsonInputs()) { %>
use Filament\Forms\Components\KeyValue;
<% } %>
<% if(this.crud.hasSelectInputs() || this.crud.hasBelongsToInputs()) { %>
use Filament\Forms\Components\Select;
<% } %>
<% if(this.crud.hasDatetimeInputs()) { %>
use Filament\Forms\Components\DateTimePicker;
<% } %>
<% if(this.crud.hasDateInputs()) { %>
use Filament\Forms\Components\DatePicker;
<% } %>
<% if(this.crud.hasCheckboxInputs()) { %>
use Filament\Forms\Components\Toggle;
<% } %>
<% if(this.crud.hasFileOrImageInputs()) { %>
use Filament\Forms\Components\FileUpload;
<% } %>
<% if(this.crud.hasColorInputs()) { %>
use Filament\Forms\Components\ColorPicker;
<% } %>
<% if(this.crud.hasTextareaInputs()) { %>
use Filament\Forms\Components\RichEditor;
use Filament\Forms\Components\MarkdownEditor;
<% } %>
<% if(this.crud.hasBelongsToInputs()) { %>
use Filament\Tables\Filters\SelectFilter;
<% } %>
<% if(this.crud.model.hasTimestampFields()) { %>
use App\Filament\Filters\DateRangeFilter;
<% } %>
<% if(this.crud.model.softDeletes) { %>
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
<% } %>
use Filament\Forms\Components\Grid;
use Filament\Forms\Components\Card;
<% if(this.crud.model.hasUniqueFields()) { %>
use Illuminate\Database\Eloquent\Model;
<% } %>
<% if(this.crud.hasPasswordInputs()) { %>
use Livewire\Component;
<% } %>

class <$ crudModelName $>Resource extends Resource
{
    protected static ?string $model = <$ crudModelName $>::class;

    protected static ?string $navigationIcon = 'heroicon-o-collection';

    protected static ?string $recordTitleAttribute = '<$ this.crud.model.getLabelFieldName() $>';


    <% if(crudPluginData.isMasterDetail) { %>
    protected static bool $shouldRegisterNavigation = false;
    <% } %>

    public static function getModelLabel(): string
    {
        return __('<$ this.crud.model.name $>');
    }

    public static function getPluralModelLabel(): String
    {
        return __('<$ this.crud.model.plural $>');
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Card::make()
                    ->schema([
                        Grid::make(['default' => 0])->schema([
                        <% if(this.crud.inputs.length && crudPluginData.inputs) { %>
                            <# Crud inputs #>
                            <% for(let input of this.crud.inputs) { %>
                                <###>
                                <% let inputNeedsOptions = input.isSelect() && !input.isForRelationship() %>
                                <###>
                                <$ this.getTypeForFilament(input) $>::make('<$ input.name $>')
                                ->label(__('<$ input.label $>'))
                                <% if(!input.isJson() && !input.isPassword()) { %>
                                ->rules(<$ this.getValidationFromInput(input) $>)
                                <% } %>
                                <###>
                                <% if( this.inputIsMoney(input)) { %>
                                    ->mask(
                                        function (TextInput\Mask $mask) {
                                            $currency = currency(config('money.defaults.currency'));
                                            return $mask->money(
                                                $currency->getSymbol(),
                                                ',',
                                                $currency->getPrecision(),
                                            );
                                        }
                                    )
                                <% }%>                                
                                <###>
                                <% if(input.name === 'id' ) { %>
                                    ->disabled()
                                    //->hidenOn(['create'])
                                <% }%>

                                <###>
                                <% if(!input.isJson()  && input.isTextarea()) { %>
                                ->toolbarButtons([
                                    //'attachFiles',
                                    'bold',
                                    'bulletList',
                                    'codeBlock',
                                    'edit',
                                    'italic',
                                    'link',
                                    'orderedList',
                                    'preview',
                                    'strike',
                                ])
                                /*
                                ->disableToolbarButtons([
                                    'attachFiles',
                                    'blockquote',
                                    'codeBlock',
                                    'h2',
                                    'h3',
                                    'sub'
                                    //'italic',
                                    //'link',
                                    'strike',
                                ])*/
                                <% } %>
                                <###>
                                <% if(input.field.nullable) { %>
                                ->nullable()
                                <% } else { %>
                                ->required()
                                <% } %>
                                <###>
                                <% if(input.field.isUnique()) { %>
                                ->unique('<$ input.field.entity.table $>', '<$ input.field.name $>', fn (?Model $record) => $record)
                                <% } %>
                                <###>
                                <% if(input.isNumeric()) { %>
                                ->numeric()
                                <% } %>
                                <###>
                                <% if(input.isForRelationship()) { %>
                                ->relationship('<$ input.relationship.name $>', '<$ input.relationship.model.getLabelFieldName() $>')
                                <% } %>
                                <###>
                                <% if(input.isEmail()) { %>
                                ->email()
                                <% } %>
                                <###>
                                <% if(input.isPassword()) { %>
                                ->password()
                                ->dehydrateStateUsing(fn ($state) => \Hash::make($state))
                                <% if(input.isRequiredOnCreate() || input.isRequiredOnUpdate()) { %>
                                ->required(
                                    <% if(!input.isRequiredOnUpdate()) { %>
                                        fn (Component $livewire) => $livewire instanceof Pages\Create<$ this.crud.model.name $>
                                    <% } %>
                                    <% if(!input.isRequiredOnCreate()) { %>
                                        fn (Component $livewire) => $livewire instanceof Pages\Edit<$ this.crud.model.name $>
                                    <% } %>
                                )
                                <% } %>
                                <% } %>
                                <###>
                                <% if(input.isUrl()) { %>
                                ->url()
                                <% } %>
                                <###>
                                <% if(input.isImage()) { %>
                                ->image()
                                //->preserveFilenames()
                                ->directory(request()->host().'/uploads/'.'<$ this.crud.model.plural $>/<$ window.pluralize(input.name) $>')
                                <% } %>
                                <###>
                                <% if(input.isSelect()) { %>
                                ->searchable()
                                <% } %>
                                <###>
                                <% if(input.isJson() && !input.field.nullable) { %>
                                ->required()
                                <% } %>
                                <###>
                                <% if(inputNeedsOptions) { %>
                                ->options([
                                    <% for(let item of input.items) { %>
                                        '<$ item.value $>' =>  __('<$ item.label $>') ,
                                    <% } %>
                                ])
                                <% } %>
                                <###>
                                <% if(input.placeholder && !input.isCheckbox() && !input.isJson()) { %>
                                ->placeholder('<$ input.placeholder $>')
                                <% } %>
                                <###>
                                <% if(input.defaultValue) { %>
                                ->default('<$ input.defaultValue $>')
                                <% } %>
                                <% if(input.name == 'id') { %>
                                ->disabled()
                                ->visibleOn(['view','edit'])
                                <% } %>
                                ->columnSpan([
                                    'default' => <$ input.cols $>,
                                    'md' => <$ input.colsMedium $>,
                                    'lg' => <$ input.colsLarge $>
                                ]),

                            <% } %>
                        <% } %>
                        ])
                    ])
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->poll('60s')
            ->columns([
                <% if(this.crudTableInputs.length) { %>
                    <% for(let inputTable of this.crudTableInputs) { %>
                        <###>
                        <% let inputTableName = inputTable.isForRelationship() ? this.getRelationshipInputName(inputTable) : inputTable.name %>
                        <% let inputTableNeedsLimit = inputTable.isText() || inputTable.isForRelationship() || inputTable.isEmail() || inputTable.isTextarea() || inputTable.isUrl() %>
                        <###>
                        Tables\Columns\<$ this.getTableType(inputTable) $>::make('<$ inputTableName $>')
                        ->label(__('<$ inputTable.label $>'))
                        ->toggleable()
                        <% if(this.inputCanBeSearchable(inputTable)) { %>
                        ->searchable()
                        //->searchable(<$ this.inputCanBeSearchableIndividually(inputTable) ? 'true, null, true' : '' $>)
                        <% }  else { %>
                        //->searchable()
                        <% } %>
                        <###>
                        <% if( this.inputIsMoney(inputTable)) { %>
                        ->money(config('money.defaults.currency'))
                        <% }%>    
                        <###>
                        <% if(inputTable.isDatetime()) { %>
                            ->dateTime()
                        <% } %>
                        <###>
                        <% if(inputTable.isDate()) { %>
                            ->date()
                        <% } %>
                        <###>
                        <% if(inputTable.isImage()) { %>
                            ->circular()
                        <% } %>
                        <###>
                        <% if(inputTable.isCheckbox()) { %>
                            ->boolean()
                        <% } %>
                        <###>
                        <% if(inputTable.isSelect() && !inputTable.isForRelationship()) { %>
                            ->enum([
                                <% for(let item of inputTable.items) { %>
                                    '<$ item.value $>' =>  __('<$ item.label $>') ,
                                <% } %>
                            ])
                        <% } %>
                        <###>
                        <% if(inputTableNeedsLimit) { %>
                            ->limit(50)
                        <% } %>
            ,//let the comma here for the next column
                    <% } %>
                <% } %>
            ])
            ->filters([
                <% if(this.crud.model.softDeletes) { %>
                    <###>
                    Tables\Filters\TrashedFilter::make(),
                <% } %>
                <% if(this.crud.model.hasTimestampFields()) { %>
                    <###>
                    DateRangeFilter::make('created_at'),
                    DateRangeFilter::make('updated_at'),
                <% } %>
                <% if(this.crud.hasBelongsToInputs()) { %>
                    <###>
                    <% for(let belongsToInput of this.crud.getBelongsToInputs()) { %>
                        <###>
                        <% let inputRelModel = belongsToInput.relationship.model %>
                        <###>
                        <% if(belongsToInput.isForRelationship()) { %>
                        SelectFilter::make('<$ belongsToInput.name $>')->relationship('<$ belongsToInput.relationship.name $>', '<$ inputRelModel.getLabelFieldName() $>')
                            ->indicator('<$ inputRelModel.name.case('pascalCase') $>')
                            ->multiple()
                            ->label('<$ inputRelModel.name.case('pascalCase') $>'),
                        <% } %>

                    <% } %>
                <% } %>
                <% if(this.crudTableInputs.length) { %>
                    <% for(let inputTable of this.crudTableInputs) { %>
                        <###>
                        <% if(inputTable.isSelect() && !inputTable.isForRelationship()) { %>
                            SelectFilter::make('<$ inputTable.name $>')
                                ->options([
                                <% for (let item of inputTable.items) { %>
                                    '<$ item.value $>' =>  __('<$ item.label $>') ,
                                <% } %>
                                ])
                                ->multiple(),

                        <% } %>
                    <% } %>
                <% } %>
            ]);
    }

    public static function getRelations(): array
    {
        return [
            <% if(this.modelRelationshipsManager.length) { %>
                <% for(let relManager of this.modelRelationshipsManager) { %>
                    <$ crudModelName $>Resource\RelationManagers\<$ relManager.model.plural.case('PascalCase') $>RelationManager::class,
                <% } %>
            <% } %>
        ];
    }

    <% if(this.crud.model.softDeletes) { %>
    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()
            ->withoutGlobalScopes([
                SoftDeletingScope::class,
            ]);
    }
    <% } %>

    public static function getPages(): array
    {
        return [
            'index' => Pages\List<$ this.crud.model.plural $>::route('/'),
            'create' => Pages\Create<$ crudModelName $>::route('/create'),
            'view' => Pages\View<$ crudModelName $>::route('/{record}'),
            'edit' => Pages\Edit<$ crudModelName $>::route('/{record}/edit'),
        ];
    }
}
